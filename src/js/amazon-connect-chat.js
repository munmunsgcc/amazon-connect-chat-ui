!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var o;!function(){"use strict";var r={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function i(e){return c(u(e),arguments)}function a(e,t){return i.apply(null,[e].concat(t||[]))}function c(e,t){var n,o,a,c,s,u,l,f,p,h=1,d=e.length,g="";for(o=0;o<d;o++)if("string"==typeof e[o])g+=e[o];else if("object"==typeof e[o]){if((c=e[o]).keys)for(n=t[h],a=0;a<c.keys.length;a++){if(null==n)throw new Error(i('[sprintf] Cannot access property "%s" of undefined value "%s"',c.keys[a],c.keys[a-1]));n=n[c.keys[a]]}else n=c.param_no?t[c.param_no]:t[h++];if(r.not_type.test(c.type)&&r.not_primitive.test(c.type)&&n instanceof Function&&(n=n()),r.numeric_arg.test(c.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(i("[sprintf] expecting number but found %T",n));switch(r.number.test(c.type)&&(f=n>=0),c.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,c.width?parseInt(c.width):0);break;case"e":n=c.precision?parseFloat(n).toExponential(c.precision):parseFloat(n).toExponential();break;case"f":n=c.precision?parseFloat(n).toFixed(c.precision):parseFloat(n);break;case"g":n=c.precision?String(Number(n.toPrecision(c.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=c.precision?n.substring(0,c.precision):n;break;case"t":n=String(!!n),n=c.precision?n.substring(0,c.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=c.precision?n.substring(0,c.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=c.precision?n.substring(0,c.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}r.json.test(c.type)?g+=n:(!r.number.test(c.type)||f&&!c.sign?p="":(p=f?"+":"-",n=n.toString().replace(r.sign,"")),u=c.pad_char?"0"===c.pad_char?"0":c.pad_char.charAt(1):" ",l=c.width-(p+n).length,s=c.width&&l>0?u.repeat(l):"",g+=c.align?p+n+s:"0"===u?p+s+n:s+p+n)}return g}var s=Object.create(null);function u(e){if(s[e])return s[e];for(var t,n=e,o=[],i=0;n;){if(null!==(t=r.text.exec(n)))o.push(t[0]);else if(null!==(t=r.modulo.exec(n)))o.push("%");else{if(null===(t=r.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){i|=1;var a=[],c=t[2],u=[];if(null===(u=r.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(a.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=r.key_access.exec(c)))a.push(u[1]);else{if(null===(u=r.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");a.push(u[1])}t[2]=a}else i|=2;if(3===i)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return s[e]=o}t.sprintf=i,t.vsprintf=a,"undefined"!=typeof window&&(window.sprintf=i,window.vsprintf=a,void 0===(o=function(){return{sprintf:i,vsprintf:a}}.call(t,n,t,e))||(e.exports=o))}()},function(e,t,n){"use strict";function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function c(e){var t="function"==typeof Map?new Map:void 0;return(c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,o)}function o(){return u(e,arguments,f(this).constructor)}return o.prototype=Object.create(e.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),l(o,e)})(e)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return(u=s()?Reflect.construct:function(e,t,n){var o=[null];o.push.apply(o,t);var r=new(Function.bind.apply(e,o));return n&&l(r,n.prototype),r}).apply(null,arguments)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n.d(t,"a",(function(){return lt}));var p=function(e){function t(e){var n;return r(this,t),(n=i(this,f(t).call(this,e))).name="ValueError",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return a(t,e),t}(c(Error)),h=function(e){function t(e){var n;return r(this,t),(n=i(this,f(t).call(this,e))).name="UnImplementedMethod",console.log("EXCEPTION: "+n.name+" MESSAGE: "+n.message),n}return a(t,e),t}(c(Error)),d=function(e){function t(e,n){var o;return r(this,t),(o=i(this,f(t).call(this,e))).name="IllegalArgument",o.argument=n,console.log("EXCEPTION: "+o.name+" MESSAGE: "+o.message),o}return a(t,e),t}(c(Error));Error,Error;function g(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var b=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"update",value:function(e){var t=e||{};this.region=t.region||this.region,this.endpointOverride=t.endpoint||this.endpointOverride,this.reconnect=!1!==t.reconnect}},{key:"getRegion",value:function(){return this.region}},{key:"getEndpointOverride",value:function(){return this.endpointOverride}}])&&g(t.prototype,n),o&&g(t,o),e}()),y={"us-west-2":{invokeUrl:"https://participant.connect.us-west-2.amazonaws.com"},"us-east-1":{invokeUrl:"https://participant.connect.us-east-1.amazonaws.com"},"ap-south-1":{invokeUrl:"https://participant.connect.ap-south-1.amazonaws.com"},"ap-southeast-1":{invokeUrl:"https://participant.connect.ap-southeast-1.amazonaws.com"},"ap-southeast-2":{invokeUrl:"https://participant.connect.ap-southeast-2.amazonaws.com"},"ap-northeast-1":{invokeUrl:"https://participant.connect.ap-northeast-1.amazonaws.com"},"eu-central-1":{invokeUrl:"https://participant.connect.eu-central-1.amazonaws.com"},"eu-west-2":{invokeUrl:"https://participant.connect.eu-west-2.amazonaws.com"}},v={AGENT:"AGENT",CUSTOMER:"CUSTOMER"},m="INCOMING_MESSAGE",k="INCOMING_TYPING",w="CONNECTION_ESTABLISHED",C="CONNECTION_LOST",S="CONNECTION_BROKEN",_="CHAT_ENDED",T={textPlain:"text/plain",connectionAcknowledged:"application/vnd.amazonaws.connect.event.connection.acknowledged",typing:"application/vnd.amazonaws.connect.event.typing",participantJoined:"application/vnd.amazonaws.connect.event.participant.joined",participantLeft:"application/vnd.amazonaws.connect.event.participant.left",transferSucceeded:"application/vnd.amazonaws.connect.event.transfer.succeeded",transferFailed:"application/vnd.amazonaws.connect.event.transfer.failed",chatEnded:"application/vnd.amazonaws.connect.event.chat.ended"},E=15,O="ASCENDING",I="BACKWARD",j="NULL",x="CLIENT_LOGGER",P="DEBUG",M="us-west-2",D=n(0);function N(e){return(N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var L={assertTrue:function(e,t){if(!e)throw new p(t)},assertNotNull:function(e,t){return L.assertTrue(null!==e&&void 0!==N(e),Object(D.sprintf)("%s must be provided",t||"A value")),e},now:function(){return(new Date).getTime()},isString:function(e){return"string"==typeof e},randomId:function(){return Object(D.sprintf)("%s-%s",L.now(),Math.random().toString(36).slice(2))},assertIsNonEmptyString:function(e,t){if(!e||"string"!=typeof e)throw new d(t+" is not a non-empty string!")},assertIsList:function(e,t){if(!Array.isArray(e))throw new d(t+" is not an array")},assertIsEnum:function(e,t,n){var o;for(o=0;o<t.length;o++)if(t[o]===e)return;throw new d(n+" passed is not valid. Allowed values are: "+t)},makeEnum:function(e){var t={};return e.forEach((function(e){var n=e.replace(/\.?([a-z]+)_?/g,(function(e,t){return t.toUpperCase()+"_"})).replace(/_$/,"");t[n]=e})),t},contains:function(e,t){return e instanceof Array?null!==L.find(e,(function(e){return e===t})):t in e},find:function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return e[n];return null},containsValue:function(e,t){return e instanceof Array?null!==L.find(e,(function(e){return e===t})):null!==L.find(L.values(e),(function(e){return e===t}))},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},values:function(e){var t=[];for(var n in L.assertNotNull(e,"map"),e)t.push(e[n]);return t},isObject:function(e){return!("object"!==N(e)||null===e)},assertIsObject:function(e,t){if(!L.isObject(e))throw new d(t+" is not an object!")},delay:function(e){return new Promise((function(t){return setTimeout(t,e)}))},asyncWhileInterval:function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,i=new Date;return t(o)?e(o).catch((function(r){var a=Math.max(0,n-(new Date).valueOf()+i.valueOf());return L.delay(a).then((function(){return L.asyncWhileInterval(e,t,n,o+1,r)}))})):Promise.reject(r||new Error("async while aborted"))}},A=L;function R(e){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function U(e,t){return(U=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function G(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function H(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function B(e,t,n){return t&&H(e.prototype,t),n&&H(e,n),e}var z=function(){function e(){G(this,e)}return B(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),q={DEBUG:10,INFO:20,WARN:30,ERROR:40},J=function(){function e(){G(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=$()}return B(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case q.DEBUG:return this._clientLogger.debug(t);case q.INFO:return this._clientLogger.info(t);case q.WARN:return this._clientLogger.warn(t);case q.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===P?this.consoleLoggerWrapper:new V(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||q.INFO,this._clientLogger=t.logger||null,this._logsDestination=j,t.debug&&(this._logsDestination=P),t.logger&&(this._logsDestination=x)}}]),e}(),X=function(){function e(){G(this,e)}return B(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),V=function(e){function t(e){var n;return G(this,t),(n=F(this,W(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&U(e,t)}(t,e),B(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(q.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(q.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(q.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(q.ERROR,t)}},{key:"_shouldLog",value:function(e){return K.hasClientLogger()&&K.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){K.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var o=e[n];t+=this._convertToString(o)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(A.isString(e))return e;if(A.isObject(e)&&A.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(X),$=function(){var e=new X;return e.debug=console.debug.bind(window.console),e.info=console.info.bind(window.console),e.warn=console.warn.bind(window.console),e.error=console.error.bind(window.console),e},K=new J;function Y(e){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Q(e,t){return!t||"object"!==Y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ee(e,t){return(ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function te(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ne(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function oe(e,t,n){return t&&ne(e.prototype,t),n&&ne(e,n),e}var re=function(){function e(){te(this,e),this.clientCache={}}return oe(e,[{key:"getCachedClient",value:function(e){var t=Object.assign({},e),n=e.region||b.getRegion()||M;if(t.region=n,this.clientCache[n])return this.clientCache[n];var o=this._createAwsClient(t);return this.clientCache[n]=o,o}},{key:"_createAwsClient",value:function(e){var t=e.region,n=b.getEndpointOverride(),o=y[t];return n&&(o.invokeUrl=n),new ie({endpoint:o.invokeUrl,region:t})}}]),e}(),ie=function(e){function t(e){var n;te(this,t),n=Q(this,Z(t).call(this));var o=new AWS.Credentials("",""),r=new AWS.Config({region:e.region,endpoint:e.endpoint,credentials:o});return n.chatClient=new AWS.ConnectParticipant(r),n.invokeUrl=e.endpoint,n.logger=K.getLogger({prefix:"ChatClient"}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ee(e,t)}(t,e),oe(t,[{key:"createParticipantConnection",value:function(e,t){var n=this,o={Type:t,ParticipantToken:e},r=n.chatClient.createParticipantConnection(o);return n._sendRequest(r).then((function(e){return n.logger.info("successfully create connection request"),e})).catch((function(e){return n.logger.error("error when creating connection request"),Promise.reject(e)}))}},{key:"disconnectParticipant",value:function(e){var t=this,n={ConnectionToken:e},o=t.chatClient.disconnectParticipant(n);return t._sendRequest(o).then((function(e){return t.logger.info("successfully disconnect participant"),e})).catch((function(e){return t.logger.error("error when disconnecting participant"),Promise.reject(e)}))}},{key:"getTranscript",value:function(e,t){var n=this,o={MaxResults:t.maxResults,NextToken:t.nextToken,ScanDirection:t.scanDirection,SortOrder:t.sortOrder,StartPosition:{Id:t.startPosition.id,AbsoluteTime:t.startPosition.absoluteTime,MostRecent:t.startPosition.mostRecent},ConnectionToken:e};t.contactId&&(o.ContactId=t.contactId);var r=n.chatClient.getTranscript(o);return n._sendRequest(r).then((function(e){return n.logger.info("successfully get transcript"),e})).catch((function(e){return n.logger.error("error when getting transcript"),Promise.reject(e)}))}},{key:"sendMessage",value:function(e,t,n){var o=this,r={Content:t,ContentType:n,ConnectionToken:e},i=o.chatClient.sendMessage(r);return o._sendRequest(i).then((function(e){return o.logger.info("successfully send message"),e})).catch((function(e){return o.logger.error("error when sending message"),Promise.reject(e)}))}},{key:"sendEvent",value:function(e,t,n){var o=this,r={ConnectionToken:e,ContentType:t,Content:n},i=o.chatClient.sendEvent(r);return o._sendRequest(i).then((function(e){return o.logger.info("successfully send event"),e})).catch((function(e){return o.logger.error("error when sending event"),Promise.reject(e)}))}},{key:"_sendRequest",value:function(e){return new Promise((function(t,n){e.on("success",(function(e){t(e)})).on("error",(function(e){var t={type:e.code,message:e.message,stack:e.stack?e.stack.split("\n"):[]};n(t)})).send()}))}}]),t}(function(){function e(){te(this,e)}return oe(e,[{key:"sendMessage",value:function(e,t,n){throw new h("sendTextMessage in ChatClient")}},{key:"disconnectParticipant",value:function(e){throw new h("disconnectParticipant in ChatClient")}},{key:"sendEvent",value:function(e,t,n){throw new h("sendEvent in ChatClient")}},{key:"createParticipantConnection",value:function(e,t){throw new h("createParticipantConnection in ChatClient")}}]),e}()),ae=new re;function ce(e){return(ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(e,t){return!t||"object"!==ce(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function le(e,t){return(le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fe(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function pe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function he(e,t,n){return t&&pe(e.prototype,t),n&&pe(e,n),e}var de=function(e){function t(){return fe(this,t),se(this,ue(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&le(e,t)}(t,e),he(t,[{key:"validateChatDetails",value:function(e){A.assertIsObject(e,"chatDetails"),A.assertIsNonEmptyString(e.contactId,"chatDetails.contactId"),A.assertIsNonEmptyString(e.participantId,"chatDetails.participantId"),e.connectionDetails?(A.assertIsObject(e.connectionDetails,"chatDetails.connectionDetails"),A.assertIsNonEmptyString(e.connectionDetails.PreSignedConnectionUrl,"chatDetails.connectionDetails.PreSignedConnectionUrl"),A.assertIsNonEmptyString(e.connectionDetails.ConnectionId,"chatDetails.connectionDetails.ConnectionId"),A.assertIsNonEmptyString(e.connectionDetails.connectionToken,"chatDetails.connectionDetails.connectionToken")):e.participantToken&&A.assertIsNonEmptyString(e.participantToken,"chatDetails.participantToken")}},{key:"validateInitiateChatResponse",value:function(){return!0}},{key:"normalizeChatDetails",value:function(e){var t={};if(t.contactId=e.ContactId||e.contactId,t.participantId=e.ParticipantId||e.participantId,t.initialContactId=e.InitialContactId||e.initialContactId||t.contactId||t.ContactId,e.participantToken||e.ParticipantToken)return t.participantToken=e.ParticipantToken||e.participantToken,this.validateChatDetails(t),t;if(e.ChatConnectionAttributes&&e.ChatConnectionAttributes.ParticipantCredentials){this.validateInitiateChatResponse(e);var n={};return n.connectionToken=e.ChatConnectionAttributes.ParticipantCredentials.ConnectionAuthenticationToken,n.ConnectionId=e.ChatConnectionAttributes.ConnectionId,n.PreSignedConnectionUrl=e.ChatConnectionAttributes.PreSignedConnectionUrl,t.connectionDetails=n,t}return this.validateChatDetails(t),t}}]),t}(function(){function e(){fe(this,e)}return he(e,[{key:"validateNewControllerDetails",value:function(e){return!0}},{key:"validateSendMessage",value:function(e){if(!A.isString(e.message))throw new d(e.message+"is not a valid message");this.validateContentType(e.contentType)}},{key:"validateContentType",value:function(e){A.assertIsEnum(e,Object.values(T),"contentType")}},{key:"validateConnectChat",value:function(e){return!0}},{key:"validateLogger",value:function(e){A.assertIsObject(e,"logger"),["debug","info","warn","error"].forEach((function(t){if(!A.isFunction(e[t]))throw new d(t+" should be a valid function on the passed logger object!")}))}},{key:"validateSendEvent",value:function(e){this.validateContentType(e.contentType)}},{key:"validateGetMessages",value:function(e){return!0}}]),e}());function ge(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var be="NeverStarted",ye="Starting",ve="Connected",me="ConnectionLost",ke="Ended",we="ConnectionLost",Ce="ConnectionGained",Se="Ended",_e="IncomingMessage",Te="WEBSOCKET",Ee="CONNECTION_CREDENTIALS",Oe=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.connectionDetailsProvider=t,this.isStarted=!1}var t,n,o;return t=e,(n=[{key:"startConnectionTokenPolling",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:432e5;t||this.connectionDetailsProvider.fetchConnectionToken().then((function(){var t=e.getConnectionTokenExpiry(),o=(new Date).getTime();n=t-o-6e4})),this.timeout=setTimeout(this.startConnectionTokenPolling.bind(this),n)}},{key:"start",value:function(){this.isStarted||(this.isStarted=!0,this.startConnectionTokenPolling(!0,this.getConnectionTokenExpiry()))}},{key:"end",value:function(){clearTimeout(this.timeout)}},{key:"getConnectionToken",value:function(){return this.connectionDetailsProvider.getConnectionToken()}},{key:"getConnectionTokenExpiry",value:function(){return new Date(this.connectionDetailsProvider.getConnectionTokenExpiry()).getTime()}}])&&ge(t.prototype,n),o&&ge(t,o),e}(),Ie=function(e,t,n){this.subMap=e,this.id=A.randomId(),this.eventName=t,this.f=n};Ie.prototype.unsubscribe=function(){this.subMap.unsubscribe(this.eventName,this.id)};var je=function(){this.subIdMap={},this.subEventNameMap={}};je.prototype.subscribe=function(e,t){var n=new Ie(this,e,t);this.subIdMap[n.id]=n;var o=this.subEventNameMap[e]||[];return o.push(n),this.subEventNameMap[e]=o,function(){return n.unsubscribe()}},je.prototype.unsubscribe=function(e,t){A.contains(this.subEventNameMap,e)&&(this.subEventNameMap[e]=this.subEventNameMap[e].filter((function(e){return e.id!==t})),this.subEventNameMap[e].length<1&&delete this.subEventNameMap[e]),A.contains(this.subIdMap,t)&&delete this.subIdMap[t]},je.prototype.getAllSubscriptions=function(){return A.values(this.subEventNameMap).reduce((function(e,t){return e.concat(t)}),[])},je.prototype.getSubscriptions=function(e){return this.subEventNameMap[e]||[]};var xe=function(e){var t=e||{};this.subMap=new je,this.logEvents=t.logEvents||!1};function Pe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}xe.prototype.subscribe=function(e,t){return A.assertNotNull(e,"eventName"),A.assertNotNull(t,"f"),A.assertTrue(A.isFunction(t),"f must be a function"),this.subMap.subscribe(e,t)},xe.prototype.subscribeAll=function(e){return A.assertNotNull(e,"f"),A.assertTrue(A.isFunction(e),"f must be a function"),this.subMap.subscribe("<<all>>",e)},xe.prototype.getSubscriptions=function(e){return this.subMap.getSubscriptions(e)},xe.prototype.trigger=function(e,t){A.assertNotNull(e,"eventName");var n=this,o=this.subMap.getSubscriptions("<<all>>"),r=this.subMap.getSubscriptions(e);o.concat(r).forEach((function(o){try{o.f(t||null,e,n)}catch(e){}}))},xe.prototype.triggerAsync=function(e,t){var n=this;setTimeout((function(){return n.trigger(e,t)}),0)},xe.prototype.bridge=function(){var e=this;return function(t,n){e.trigger(n,t)}},xe.prototype.unsubscribeAll=function(){this.subMap.getAllSubscriptions().forEach((function(e){e.unsubscribe()}))};var Me=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.chatClient=n,this.participantToken=t||null,this.connectionDetails=null,this.connectionToken=null,this.connectionTokenExpiry=null}var t,n,o;return t=e,(n=[{key:"getConnectionToken",value:function(){return this.connectionToken}},{key:"getConnectionTokenExpiry",value:function(){return this.connectionTokenExpiry}},{key:"getConnectionDetails",value:function(){return this.connectionDetails}},{key:"fetchConnectionDetails",value:function(){var e=this;return this._fetchConnectionDetails().then((function(){return e.connectionDetails}))}},{key:"fetchConnectionToken",value:function(){var e=this;return this._fetchConnectionDetails().then((function(){return e.connectionToken}))}},{key:"_handleCreateParticipantConnectionResponse",value:function(e){this.connectionDetails={url:e.Websocket.Url,expiry:e.Websocket.ConnectionExpiry},this.connectionToken=e.ConnectionCredentials.ConnectionToken,this.connectionTokenExpiry=e.ConnectionCredentials.Expiry}},{key:"_fetchConnectionDetails",value:function(){var e=this;return this.participantToken?this.chatClient.createParticipantConnection(this.participantToken,[Te,Ee]).then((function(t){return e._handleCreateParticipantConnectionResponse(t.data)})).catch((function(e){return Promise.reject({reason:"Failed to fetch connectionDetails with createParticipantConnection",_debug:e})})):Promise.reject({reason:"Failed to fetch connectionDetails.",_debug:new d("Failed to fetch connectionDetails.")})}}])&&Pe(t.prototype,n),o&&Pe(t,o),e}(),De=n(3);function Ne(e){return(Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Le(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ae(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Re(e,t,n){return t&&Ae(e.prototype,t),n&&Ae(e,n),e}function Fe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function We(e,t,n){return(We="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ue(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function Ue(e){return(Ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ge(e,t){return(Ge=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var He=function(e){function t(e,n,o,r){var i,a,c;return Le(this,t),a=this,(i=!(c=Ue(t).call(this,o))||"object"!==Ne(c)&&"function"!=typeof c?Fe(a):c).cleanUpBaseInstance=!r,i.tryCleanup(),t.baseInstance||(t.baseInstance=new Be(o,r)),i.contactId=e,i.initialContactId=n,i.status=null,i.eventBus=new xe,i.subscriptions=[t.baseInstance.onEnded(i.handleEnded.bind(Fe(i))),t.baseInstance.onConnectionGain(i.handleConnectionGain.bind(Fe(i))),t.baseInstance.onConnectionLost(i.handleConnectionLost.bind(Fe(i))),t.baseInstance.onMessage(i.handleMessage.bind(Fe(i)))],i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ge(e,t)}(t,e),Re(t,[{key:"start",value:function(){return We(Ue(t.prototype),"start",this).call(this),t.baseInstance.start()}},{key:"end",value:function(){We(Ue(t.prototype),"end",this).call(this),this.eventBus.unsubscribeAll(),this.subscriptions.forEach((function(e){return e()})),this.status=ke,this.tryCleanup()}},{key:"tryCleanup",value:function(){t.baseInstance&&this.cleanUpBaseInstance&&(t.baseInstance.end(),t.baseInstance=null)}},{key:"getStatus",value:function(){return this.status||t.baseInstance.getStatus()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Se,e)}},{key:"handleEnded",value:function(){this.eventBus.trigger(Se,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"handleConnectionGain",value:function(){this.eventBus.trigger(Ce,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(we,e)}},{key:"handleConnectionLost",value:function(){this.eventBus.trigger(we,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(_e,e)}},{key:"handleMessage",value:function(e){e.InitialContactId!==this.initialContactId&&e.ContactId!==this.contactId||this.eventBus.trigger(_e,e)}}]),t}(Oe);He.baseInstance=null;var Be=function(){function e(t,n){Le(this,e),this.status=be,this.eventBus=new xe,this.logger=K.getLogger({prefix:"LPC WebSockets: "}),this.initWebsocketManager(n,t)}return Re(e,[{key:"initWebsocketManager",value:function(e,t){this.websocketManager=e||De.a.create(),this.websocketManager.subscribeTopics(["aws/chat"]),this.subscriptions=[this.websocketManager.onMessage("aws/chat",this.handleMessage.bind(this)),this.websocketManager.onConnectionGain(this.handleConnectionGain.bind(this)),this.websocketManager.onConnectionLost(this.handleConnectionLost.bind(this)),this.websocketManager.onInitFailure(this.handleEnded.bind(this))],e||this.websocketManager.init((function(){return t.fetchConnectionDetails().then((function(e){return{webSocketTransport:{url:e.url,expiry:e.expiry}}}))}))}},{key:"end",value:function(){this.websocketManager.closeWebSocket(),this.eventBus.unsubscribeAll(),this.subscriptions.forEach((function(e){return e()}))}},{key:"start",value:function(){return this.status===be&&(this.status=ye),Promise.resolve()}},{key:"onEnded",value:function(e){return this.eventBus.subscribe(Se,e)}},{key:"handleEnded",value:function(){this.status=ke,this.eventBus.trigger(Se,{})}},{key:"onConnectionGain",value:function(e){return this.eventBus.subscribe(Ce,e)}},{key:"handleConnectionGain",value:function(){this.status=ve,this.eventBus.trigger(Ce,{})}},{key:"onConnectionLost",value:function(e){return this.eventBus.subscribe(we,e)}},{key:"handleConnectionLost",value:function(){this.status=me,this.eventBus.trigger(we,{})}},{key:"onMessage",value:function(e){return this.eventBus.subscribe(_e,e)}},{key:"handleMessage",value:function(e){var t;try{t=JSON.parse(e.content),this.eventBus.trigger(_e,t)}catch(t){this.logger.error("Wrong message format: ",e)}}},{key:"getStatus",value:function(){return this.status}}]),e}(),ze=He;function qe(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var Je="NeverEstablished",Xe="Establishing",Ve="Established",$e="Broken",Ke=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.logger=K.getLogger({prefix:"ContactId-"+t.chatDetails.contactId+": "}),this.argsValidator=new de,this.pubsub=new xe,this.sessionType=t.sessionType,this.connectionDetails=t.chatDetails.connectionDetails,this.initialContactId=t.chatDetails.initialContactId,this.contactId=t.chatDetails.contactId,this.participantId=t.chatDetails.participantId,this.chatClient=t.chatClient,this.participantToken=t.chatDetails.participantToken,this.websocketManager=t.websocketManager,this._participantDisconnected=!1,this.sessionMetadata={}}var t,n,o;return t=e,(n=[{key:"subscribe",value:function(e,t){this.pubsub.subscribe(e,t),this.logger.info("Subscribed successfully to eventName: ",e)}},{key:"handleRequestSuccess",value:function(e,t,n){var o=this;return function(r){return r.metadata=e,o.logger.debug("".concat(n," successful! Response: "),r," / Request: ",t),r}}},{key:"handleRequestFailure",value:function(e,t,n){var o=this;return function(r){return r.metadata=e,o.logger.debug("".concat(n," failed! Error: "),r," / Request: ",t),Promise.reject(r)}}},{key:"sendMessage",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendMessage(e);var n=this.connectionHelper.getConnectionToken();return this.chatClient.sendMessage(n,e.message,e.contentType).then(this.handleRequestSuccess(t,e,"sendMessage")).catch(this.handleRequestFailure(t,e,"sendMessage"))}},{key:"sendEvent",value:function(e){var t=e.metadata||null;this.argsValidator.validateSendEvent(e);var n=this.connectionHelper.getConnectionToken(),o=e.content||null;return this.chatClient.sendEvent(n,e.contentType,o).then(this.handleRequestSuccess(t,e,"sendEvent")).catch(this.handleRequestFailure(t,e,"sendEvent"))}},{key:"getTranscript",value:function(e){if(this.connectionHelper.getStatus()===ke)return Promise.reject("AccessDeniedException");var t=e.metadata||null,n={startPosition:e.startPosition||{},scanDirection:e.scanDirection||I,sortOrder:e.sortOrder||O,maxResults:e.maxResults||E};e.nextToken&&(n.nextToken=e.nextToken),e.contactId&&(n.contactId=e.contactId);var o=this.connectionHelper.getConnectionToken();return this.chatClient.getTranscript(o,n).then(this.handleRequestSuccess(t,n,"getTranscript")).catch(this.handleRequestFailure(t,n,"getTranscript"))}},{key:"connect",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sessionMetadata=e.metadata||null,this.argsValidator.validateConnectChat(e);var t=this._getConnectionDetailsProvider();return t.fetchConnectionToken().then(this._initConnectionHelper.bind(this,t)).then(this._onConnectSuccess.bind(this),this._onConnectFailure.bind(this))}},{key:"_initConnectionHelper",value:function(e){return this.connectionHelper=new ze(this.contactId,this.initialContactId,e,this.websocketManager),this.connectionHelper.onEnded(this._handleEndedConnection.bind(this)),this.connectionHelper.onConnectionLost(this._handleLostConnection.bind(this)),this.connectionHelper.onConnectionGain(this._handleGainedConnection.bind(this)),this.connectionHelper.onMessage(this._handleIncomingMessage.bind(this)),this.connectionHelper.start()}},{key:"_getConnectionDetailsProvider",value:function(){return new Me(this.participantToken,this.chatClient)}},{key:"_handleEndedConnection",value:function(e){this._forwardChatEvent(S,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleLostConnection",value:function(e){this._forwardChatEvent(C,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleGainedConnection",value:function(e){this._forwardChatEvent(w,{data:e,chatDetails:this.getChatDetails()})}},{key:"_handleIncomingMessage",value:function(e){try{var t=e.ContentType===T.typing?k:m;this._forwardChatEvent(t,{data:e,chatDetails:this.getChatDetails()}),e.ContentType===T.chatEnded&&(this._forwardChatEvent(_,{data:null,chatDetails:this.getChatDetails()}),this.breakConnection())}catch(t){this.logger.error("Error occured while handling message from Connection. eventData: ",e," Causing exception: ",t)}}},{key:"_forwardChatEvent",value:function(e,t){this.logger.debug("Triggering event for subscribers:",e,t),this.pubsub.triggerAsync(e,t)}},{key:"_onConnectSuccess",value:function(e){this.logger.info("Connect successful!");var t={_debug:e,connectSuccess:!0,connectCalled:!0,metadata:this.sessionMetadata},n=Object.assign({chatDetails:this.getChatDetails()},t);return this.pubsub.triggerAsync(w,n),this._shouldAcknowledgeContact()&&this.sendEvent({contentType:T.connectionAcknowledged}),t}},{key:"_onConnectFailure",value:function(e){var t={_debug:e,connectSuccess:!1,connectCalled:!0,metadata:this.sessionMetadata};return this.logger.error("Connect Failed with data: ",t),Promise.reject(t)}},{key:"_shouldAcknowledgeContact",value:function(){return this.sessionType===v.AGENT}},{key:"breakConnection",value:function(){return this.connectionHelper?this.connectionHelper.end():Promise.resolve()}},{key:"cleanUpOnParticipantDisconnect",value:function(){this.pubsub.unsubscribeAll()}},{key:"disconnectParticipant",value:function(){var e=this,t=this.connectionHelper.getConnectionToken();return this.chatClient.disconnectParticipant(t).then((function(t){return e.logger.info("disconnect participant successful"),e._participantDisconnected=!0,e.cleanUpOnParticipantDisconnect(),e.breakConnection(),t}),(function(t){return e.logger.error("disconnect participant failed with error: ",t),Promise.reject(t)}))}},{key:"getChatDetails",value:function(){return{initialContactId:this.initialContactId,contactId:this.contactId,participantId:this.participantId,participantToken:this.participantToken,connectionDetails:this.connectionDetails}}},{key:"_convertConnectionHelperStatus",value:function(e){switch(e){case be:return Je;case ye:return Xe;case ke:case me:return $e;case ve:return Ve}this.logger.error("Reached invalid state. Unknown connectionHelperStatus: ",e)}},{key:"getConnectionStatus",value:function(){return this._convertConnectionHelperStatus(this.connectionHelper.getStatus())}}])&&qe(t.prototype,n),o&&qe(t,o),e}();function Ye(e){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qe(e,t){return!t||"object"!==Ye(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ze(e){return(Ze=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function et(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tt(e,t)}function tt(e,t){return(tt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function nt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ot(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function rt(e,t,n){return t&&ot(e.prototype,t),n&&ot(e,n),e}var it=function(e){function t(){var e;return nt(this,t),(e=Qe(this,Ze(t).call(this))).argsValidator=new de,e}return et(t,e),rt(t,[{key:"createChatSession",value:function(e,t,n,o){var r=this._createChatController(e,t,n,o);if(e===v.AGENT)return new ct(r);if(e===v.CUSTOMER)return new st(r);throw new d("Unkown value for session type, Allowed values are: "+Object.values(v),e)}},{key:"_createChatController",value:function(e,t,n,o){var r={sessionType:e,chatDetails:this.argsValidator.normalizeChatDetails(t),chatClient:ae.getCachedClient(n),websocketManager:o};return new Ke(r)}}]),t}(function(){function e(){nt(this,e)}return rt(e,[{key:"createAgentChatController",value:function(e,t){throw new h("createAgentChatController in ChatControllerFactory.")}},{key:"createCustomerChatController",value:function(e,t){throw new h("createCustomerChatController in ChatControllerFactory.")}}]),e}()),at=function(){function e(t){nt(this,e),this.controller=t}return rt(e,[{key:"onMessage",value:function(e){this.controller.subscribe(m,e)}},{key:"onTyping",value:function(e){this.controller.subscribe(k,e)}},{key:"onConnectionBroken",value:function(e){this.controller.subscribe(S,e)}},{key:"onConnectionEstablished",value:function(e){this.controller.subscribe(w,e)}},{key:"onEnded",value:function(e){this.controller.subscribe(_,e)}},{key:"sendMessage",value:function(e){return this.controller.sendMessage(e)}},{key:"connect",value:function(e){return this.controller.connect(e)}},{key:"sendEvent",value:function(e){return this.controller.sendEvent(e)}},{key:"getTranscript",value:function(e){return this.controller.getTranscript(e)}},{key:"getChatDetails",value:function(){return this.controller.getChatDetails()}}]),e}(),ct=function(e){function t(e){return nt(this,t),Qe(this,Ze(t).call(this,e))}return et(t,e),rt(t,[{key:"cleanUpOnParticipantDisconnect",value:function(){return this.controller.cleanUpOnParticipantDisconnect()}}]),t}(at),st=function(e){function t(e){return nt(this,t),Qe(this,Ze(t).call(this,e))}return et(t,e),rt(t,[{key:"disconnectParticipant",value:function(){return this.controller.disconnectParticipant()}}]),t}(at),ut=new it,lt={create:function(e){var t=e.options||{},n=e.type||v.AGENT;return ut.createChatSession(n,e.chatDetails,t,e.websocketManager)},setGlobalConfig:function(e){var t=e.loggerConfig;b.update(e),K.updateLoggerConfig(t)},LogLevel:q,Logger:z,SessionTypes:v}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e.connect=e.connect||{};var o=connect.WebSocketManager;!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==n(e)&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(r,i,function(t){return e[t]}.bind(null,i));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=2)}([function(e,t,o){var r=o(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==n(Symbol.iterator)?function(e){return n(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)})(e)}var a={assertTrue:function(e,t){if(!e)throw new Error(t)},assertNotNull:function(e,t){return a.assertTrue(null!==e&&void 0!==i(e),Object(r.sprintf)("%s must be provided",t||"A value")),e},isNonEmptyString:function(e){return"string"==typeof e&&e.length>0},assertIsList:function(e,t){if(!Array.isArray(e))throw new Error(t+" is not an array")},isFunction:function(e){return!!(e&&e.constructor&&e.call&&e.apply)},isObject:function(e){return!("object"!==i(e)||null===e)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e}},c=new RegExp("^(wss://)\\w*");a.validWSUrl=function(e){return c.test(e)},a.assertIsObject=function(e,t){if(!a.isObject(e))throw new Error(t+" is not an object!")};var s=a,u="DEBUG",l="aws/subscribe",f="aws/heartbeat";function p(e){return(p="function"==typeof Symbol&&"symbol"==n(Symbol.iterator)?function(e){return n(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)})(e)}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function y(e,t,n){return t&&b(e.prototype,t),n&&b(e,n),e}var v=function(){function e(){g(this,e)}return y(e,[{key:"debug",value:function(e){}},{key:"info",value:function(e){}},{key:"warn",value:function(e){}},{key:"error",value:function(e){}}]),e}(),m={DEBUG:10,INFO:20,WARN:30,ERROR:40},k=function(){function e(){g(this,e),this.updateLoggerConfig(),this.consoleLoggerWrapper=S()}return y(e,[{key:"writeToClientLogger",value:function(e,t){if(this.hasClientLogger())switch(e){case m.DEBUG:return this._clientLogger.debug(t);case m.INFO:return this._clientLogger.info(t);case m.WARN:return this._clientLogger.warn(t);case m.ERROR:return this._clientLogger.error(t)}}},{key:"isLevelEnabled",value:function(e){return e>=this._level}},{key:"hasClientLogger",value:function(){return null!==this._clientLogger}},{key:"getLogger",value:function(e){var t=e.prefix||"";return this._logsDestination===u?this.consoleLoggerWrapper:new C(t)}},{key:"updateLoggerConfig",value:function(e){var t=e||{};this._level=t.level||m.INFO,this._clientLogger=t.logger||null,this._logsDestination="NULL",t.debug&&(this._logsDestination=u),t.logger&&(this._logsDestination="CLIENT_LOGGER")}}]),e}(),w=function(){function e(){g(this,e)}return y(e,[{key:"debug",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),e}(),C=function(e){function t(e){var n;return g(this,t),(n=function(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}(this,h(t).call(this))).prefix=e||"",n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,w),y(t,[{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(m.DEBUG,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(m.INFO,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(m.WARN,t)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this._log(m.ERROR,t)}},{key:"_shouldLog",value:function(e){return _.hasClientLogger()&&_.isLevelEnabled(e)}},{key:"_writeToClientLogger",value:function(e,t){_.writeToClientLogger(e,t)}},{key:"_log",value:function(e,t){if(this._shouldLog(e)){var n=this._convertToSingleStatement(t);this._writeToClientLogger(e,n)}}},{key:"_convertToSingleStatement",value:function(e){var t="";this.prefix&&(t+=this.prefix+" ");for(var n=0;n<e.length;n++){var o=e[n];t+=this._convertToString(o)+" "}return t}},{key:"_convertToString",value:function(e){try{if(!e)return"";if(s.isString(e))return e;if(s.isObject(e)&&s.isFunction(e.toString)){var t=e.toString();if("[object Object]"!==t)return t}return JSON.stringify(e)}catch(t){return console.error("Error while converting argument to string",e,t),""}}}]),t}(),S=function(){var e=new w;return e.debug=console.debug,e.info=console.info,e.warn=console.warn,e.error=console.error,e},_=new k;o.d(t,"a",(function(){return E}));var T=function(){var e=_.getLogger({}),t=null,n={reconnectWebSocket:!1,websocketInitFailed:!1,linearConnectAttempt:0,exponentialConnectAttempt:0,exponentialBackOffTime:1e3,linearTimeoutHandle:null,exponentialTimeoutHandle:null,lifeTimeTimeoutHandle:null},o={pendingResponse:!1,intervalHandle:null},r={initFailure:new Set,getWebSocketTransport:null,subscriptionUpdate:new Set,subscriptionFailure:new Set,topic:new Map,allMessage:new Set,connectionGain:new Set,connectionLost:new Set},i={connConfig:null,promiseHandle:null,promiseCompleted:!1},a={subscribed:new Set,pending:new Set},c=new Set([l,"aws/unsubscribe",f]),u=navigator.onLine,p=setInterval((function(){u!==navigator.onLine&&(u=navigator.onLine)&&(!t||t.readyState>1)&&(e.info("Network online, Connecting to websocket"),E())}),250),h=function(e,t){e.forEach((function(e){e(t)}))},d=function(){if(o.pendingResponse)return e.warn("Heartbeat response not received"),clearInterval(o.intervalHandle),o.pendingResponse=!1,void w();e.debug("Sending heartbeat"),t.send(S(f)),o.pendingResponse=!0},g=function(){n.linearConnectAttempt=0,n.exponentialConnectAttempt=0,n.exponentialBackOffTime=1e3,o.pendingResponse=!1,n.reconnectWebSocket=!1,clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(o.intervalHandle),clearTimeout(n.linearTimeoutHandle),clearTimeout(n.exponentialTimeoutHandle)},b=function(){try{if(e.info("WebSocket connection established!"),h(r.connectionGain),g(),a.subscribed.size>0||a.pending.size>0){var c=Array.from(a.subscribed.values());c=c.concat(Array.from(a.pending.values())),a.subscribed.clear(),t.send(S(l,{topics:c}))}d(),o.intervalHandle=setInterval(d,1e4),n.lifeTimeTimeoutHandle=setTimeout((function(){e.debug("Starting scheduled WebSocket manager reconnect"),w()}),Date.parse(i.connConfig.webSocketTransport.expiry)-Date.now())}catch(t){e.error("Error after establishing web socket connection, error: ",t)}},y=function(t){n.linearConnectAttempt<=1&&h(r.connectionLost),e.info("Socket connection is closed. event: ",t),n.reconnectWebSocket&&O()},v=function(t){e.error("WebSocketManager Error, error_event: ",t),w()},m=function(t){var n=JSON.parse(t.data);switch(n.topic){case l:e.info("Subscription Message received from webSocket server",t.data),"success"===n.content.status?(n.content.topics.forEach((function(e){a.subscribed.add(e),a.pending.delete(e)})),h(r.subscriptionUpdate,n)):h(r.subscriptionFailure,n);break;case f:e.debug("Heartbeat response received"),o.pendingResponse=!1;break;default:if(n.topic){if(0===r.allMessage.size&&0===r.topic.size)return void e.warn("No registered callback listener for Topic",n);h(r.allMessage,n),r.topic.has(n.topic)&&h(r.topic.get(n.topic),n)}else n.message?e.warn("WebSocketManager Message Error",n):e.warn("Invalid incoming message",n)}},k=function(e){return!(!t||t.readyState===WebSocket.CLOSED||(t.close(1e3,e),0))},w=function(){if(u)if(clearTimeout(n.lifeTimeTimeoutHandle),clearInterval(o.intervalHandle),n.linearConnectAttempt<3){n.linearConnectAttempt++;var t=Math.floor(2e3*(1+Math.random()));e.debug("Starting Linear WebSocket reconnect, Attempt : #"+n.linearConnectAttempt+" with delay "+t+" ms"),n.linearTimeoutHandle=setTimeout((function(){n.reconnectWebSocket=!0,E()}),t)}else if(n.exponentialConnectAttempt<3){n.exponentialConnectAttempt++,n.exponentialBackOffTime*=2;var r=Math.floor(n.exponentialBackOffTime*(1+Math.random()));e.debug("Starting Exponential WebSocket reconnect, Attempt : #"+n.exponentialConnectAttempt+" with delay "+r+" sec."),i.promiseCompleted=!1,i.connConfig=null,n.exponentialTimeoutHandle=setTimeout((function(){n.reconnectWebSocket=!0,E()}),r)}else i.promiseCompleted&&(e.error("Could not connect to WebSocket after several attempts"),C());else k("Network Offline, Closing WebSocket Manager")},C=function(){g(),k("Terminating WebSocket Manager"),e.error("WebSocket Initialization failed"),n.websocketInitFailed=!0,clearInterval(p),h(r.initFailure)},S=function(e,t){return JSON.stringify({topic:e,content:t})},T=function(t){return!!(s.isObject(t)&&s.isObject(t.webSocketTransport)&&s.isNonEmptyString(t.webSocketTransport.url)&&s.validWSUrl(t.webSocketTransport.url)&&s.isNonEmptyString(t.webSocketTransport.expiry)&&Date.parse(t.webSocketTransport.expiry)-Date.now()>=36e5)||(e.error("Invalid WebSocket Connection Configuration",t),!1)},E=function(){n.websocketInitFailed||(i.connConfig=null,i.promiseCompleted=!1,i.promiseHandle=r.getWebSocketTransport(),i.promiseHandle.then((function(t){i.promiseCompleted=!0,e.debug("Successfully fetched webSocket connection configuration"),T(t)?(i.connConfig=t,u&&(k("Restarting WebSocket Manager")||O())):C()}),(function(t){i.promiseCompleted=!0,e.error("Failed to fetch webSocket connection configuration",t),w()})))},O=function(){if(!n.websocketInitFailed){e.debug("Initializing Websocket Manager");try{T(i.connConfig)?((t=new WebSocket(i.connConfig.webSocketTransport.url)).addEventListener("open",b),t.addEventListener("message",m),t.addEventListener("error",v),t.addEventListener("close",y)):i.promiseCompleted&&C()}catch(t){e.error("Error Initializing web-socket-manager",t),C()}}};this.init=function(t){s.assertTrue(s.isFunction(t),"transportHandle must be a function"),null===r.getWebSocketTransport?(r.getWebSocketTransport=t,E()):e.warn("Web Socket Manager was already initialized")},this.onInitFailure=function(e){return s.assertTrue(s.isFunction(e),"cb must be a function"),r.initFailure.add(e),n.websocketInitFailed&&e(),function(){return r.initFailure.delete(e)}},this.onConnectionGain=function(e){return s.assertTrue(s.isFunction(e),"cb must be a function"),r.connectionGain.add(e),t&&t.readyState===WebSocket.OPEN&&e(),function(){return r.connectionGain.delete(e)}},this.onConnectionLost=function(e){return s.assertTrue(s.isFunction(e),"cb must be a function"),r.connectionLost.add(e),t&&t.readyState===WebSocket.CLOSED&&e(),function(){return r.connectionLost.delete(e)}},this.onSubscriptionUpdate=function(e){return s.assertTrue(s.isFunction(e),"cb must be a function"),r.subscriptionUpdate.add(e),function(){return r.subscriptionUpdate.delete(e)}},this.onSubscriptionFailure=function(e){return s.assertTrue(s.isFunction(e),"cb must be a function"),r.subscriptionFailure.add(e),function(){return r.subscriptionFailure.delete(e)}},this.onMessage=function(e,t){return s.assertNotNull(e,"topicName"),s.assertTrue(s.isFunction(t),"cb must be a function"),r.topic.has(e)?r.topic.get(e).add(t):r.topic.set(e,new Set([t])),function(){return r.topic.get(e).delete(t)}},this.onAllMessage=function(e){return s.assertTrue(s.isFunction(e),"cb must be a function"),r.allMessage.add(e),function(){return r.allMessage.delete(e)}},this.subscribeTopics=function(e){s.assertNotNull(e,"topics"),s.assertIsList(e),e.forEach((function(e){a.pending.add(e)})),t&&t.readyState===WebSocket.OPEN&&t.send(S(l,{topics:e}))},this.sendMessage=function(n){if(s.assertIsObject(n,"payload"),void 0===n.topic||c.has(n.topic))e.warn("Cannot send message, Invalid topic",n);else{try{n=JSON.stringify(n)}catch(t){return void e.warn("Error stringify message",n)}t&&t.readyState===WebSocket.OPEN?t.send(n):e.warn("Cannot send message, web socket connection is not open")}},this.closeWebSocket=function(){g(),clearInterval(p),k("User request to close WebSocket")}},E={create:function(){return new T},setGlobalConfig:function(e){var t=e.loggerConfig;_.updateLoggerConfig(t)},LogLevel:m,Logger:v}},function(e,t,o){var r;!function(){var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function a(e){return function(e,t){var o,r,c,s,u,l,f,p,h,d=1,g=e.length,b="";for(r=0;r<g;r++)if("string"==typeof e[r])b+=e[r];else if("object"==n(e[r])){if((s=e[r]).keys)for(o=t[d],c=0;c<s.keys.length;c++){if(null==o)throw new Error(a('[sprintf] Cannot access property "%s" of undefined value "%s"',s.keys[c],s.keys[c-1]));o=o[s.keys[c]]}else o=s.param_no?t[s.param_no]:t[d++];if(i.not_type.test(s.type)&&i.not_primitive.test(s.type)&&o instanceof Function&&(o=o()),i.numeric_arg.test(s.type)&&"number"!=typeof o&&isNaN(o))throw new TypeError(a("[sprintf] expecting number but found %T",o));switch(i.number.test(s.type)&&(p=o>=0),s.type){case"b":o=parseInt(o,10).toString(2);break;case"c":o=String.fromCharCode(parseInt(o,10));break;case"d":case"i":o=parseInt(o,10);break;case"j":o=JSON.stringify(o,null,s.width?parseInt(s.width):0);break;case"e":o=s.precision?parseFloat(o).toExponential(s.precision):parseFloat(o).toExponential();break;case"f":o=s.precision?parseFloat(o).toFixed(s.precision):parseFloat(o);break;case"g":o=s.precision?String(Number(o.toPrecision(s.precision))):parseFloat(o);break;case"o":o=(parseInt(o,10)>>>0).toString(8);break;case"s":o=String(o),o=s.precision?o.substring(0,s.precision):o;break;case"t":o=String(!!o),o=s.precision?o.substring(0,s.precision):o;break;case"T":o=Object.prototype.toString.call(o).slice(8,-1).toLowerCase(),o=s.precision?o.substring(0,s.precision):o;break;case"u":o=parseInt(o,10)>>>0;break;case"v":o=o.valueOf(),o=s.precision?o.substring(0,s.precision):o;break;case"x":o=(parseInt(o,10)>>>0).toString(16);break;case"X":o=(parseInt(o,10)>>>0).toString(16).toUpperCase()}i.json.test(s.type)?b+=o:(!i.number.test(s.type)||p&&!s.sign?h="":(h=p?"+":"-",o=o.toString().replace(i.sign,"")),l=s.pad_char?"0"===s.pad_char?"0":s.pad_char.charAt(1):" ",f=s.width-(h+o).length,u=s.width&&f>0?l.repeat(f):"",b+=s.align?h+o+u:"0"===l?h+u+o:u+h+o)}return b}(function(e){if(s[e])return s[e];for(var t,n=e,o=[],r=0;n;){if(null!==(t=i.text.exec(n)))o.push(t[0]);else if(null!==(t=i.modulo.exec(n)))o.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){r|=1;var a=[],c=t[2],u=[];if(null===(u=i.key.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(a.push(u[1]);""!==(c=c.substring(u[0].length));)if(null!==(u=i.key_access.exec(c)))a.push(u[1]);else{if(null===(u=i.index_access.exec(c)))throw new SyntaxError("[sprintf] failed to parse named argument key");a.push(u[1])}t[2]=a}else r|=2;if(3===r)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return s[e]=o}(e),arguments)}function c(e,t){return a.apply(null,[e].concat(t||[]))}var s=Object.create(null);t.sprintf=a,t.vsprintf=c,"undefined"!=typeof window&&(window.sprintf=a,window.vsprintf=c,void 0===(r=function(){return{sprintf:a,vsprintf:c}}.call(t,o,t,e))||(e.exports=r))}()},function(e,t,n){n.r(t),function(e){n.d(t,"WebSocketManager",(function(){return r}));var o=n(0);e.connect=e.connect||{},connect.WebSocketManager=o.a,connect.testnum=1;var r=o.a}.call(this,n(3))},function(e,t){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==("undefined"==typeof window?"undefined":n(window))&&(o=window)}e.exports=o}]);var r=connect.WebSocketManager;connect.WebSocketManager=o,t.a=r}).call(this,n(2))},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"ChatSession",(function(){return r}));var o=n(1);e.connect=e.connect||{},connect.ChatSession=o.a;var r=o.a}.call(this,n(2))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,